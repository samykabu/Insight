using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalLanguage:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private bool _isDefault;		private string _Lang;		private Int64 _PortalLangID;		#endregion		#region Public properties		/// <summary>		/// is This the Default language		/// </summary>		public bool isDefault		{			 get { return _isDefault; }			 set { _isDefault=value; }		}		/// <summary>		/// Supported Language		/// </summary>		public string Lang		{			 get { return _Lang; }			 set { _Lang=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PortalLangID		{			 get { return _PortalLangID; }			 set { _PortalLangID=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalLanguage()		{			TableName="PortalLanguage";		}		public PortalLanguage(Int64 PortalLangID)		{			TableName="PortalLanguage";			_PortalLangID=PortalLangID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalLanguage));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalLanguage Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalLanguage));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalLanguage)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalLanguage where PortalLangID="+_PortalLangID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_isDefault =(bool) Internalds.Tables[0].Rows[0]["isDefault"];				_Lang =(string) Internalds.Tables[0].Rows[0]["Lang"];				_PortalLangID =(Int64) Internalds.Tables[0].Rows[0]["PortalLangID"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Lang==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Lang Value can not be null ",PropertyName = "Lang",ValidationError = " " });				 //throw new Exception("Lang Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[2];			StoredProcedureParam[0]=MakeParameter("@isDefault",_isDefault);			StoredProcedureParam[1]=MakeParameter("@Lang",_Lang);			try			{				RunSqlCommand("[Insert_PortalLanguage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_PortalLangID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[3];			StoredProcedureParam[0]=MakeParameter("@isDefault",_isDefault);			StoredProcedureParam[1]=MakeParameter("@Lang",_Lang);			StoredProcedureParam[2]=MakeParameter("@PortalLangID",_PortalLangID);			try			{				RunSqlCommand("[Update_PortalLanguage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@PortalLangID",_PortalLangID);			try			{				RunSqlCommand("[Delete_PortalLanguage]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalLanguageDS SelectAll()		{			 Insight.Datasets.PortalLanguageDS ResDS=new Insight.Datasets.PortalLanguageDS();			 RunStaticSqlCommand("Select * from PortalLanguage", ResDS,"PortalLanguage");			 return (Insight.Datasets.PortalLanguageDS) ResDS ;		}		public static Insight.Datasets.PortalLanguageDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalLanguageDS  ResDS=new Insight.Datasets.PortalLanguageDS();			 RunStaticSqlCommand("Select * from PortalLanguage where " + FilterBy, ResDS, "PortalLanguage");			 return (Insight.Datasets.PortalLanguageDS) ResDS ; 		}		#endregion	}}