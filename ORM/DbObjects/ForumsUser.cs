using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class ForumsUser:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private DateTime _Joined;		private Int32 _TimeZone;		private string _Email=string.Empty;		private string _ThemeFile=string.Empty;		private Int64 _numPosts;		private Int64 _BoardID;		private string _Avatar=string.Empty;		private bool _isApproved=false;		private DateTime _suspended=DateTime.MinValue;		private bool _isActiveExcluded=false;		private string _AvatarImageType=string.Empty;		private string _IP=string.Empty;		private Int64 _RankID;		private Int32 _flags;		private bool _pmNotification;		private Int32 _points;		private bool _OverrideDefaultTheme;		private Int64 _UserID;		private byte[] _AvatarImage=null;		private string _Name;		private Int64 _ProfileID=0;		private string _LanguageFile=string.Empty;		private DateTime _LastVisit;		private string _ProviderUserKey=string.Empty;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime Joined		{			 get { return _Joined; }			 set { _Joined=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 TimeZone		{			 get { return _TimeZone; }			 set { _TimeZone=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Email		{			 get { return _Email; }			 set { _Email=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string ThemeFile		{			 get { return _ThemeFile; }			 set { _ThemeFile=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 numPosts		{			 get { return _numPosts; }			 set { _numPosts=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 BoardID		{			 get { return _BoardID; }			 set { _BoardID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Avatar		{			 get { return _Avatar; }			 set { _Avatar=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isApproved		{			 get { return _isApproved; }			 set { _isApproved=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime suspended		{			 get { return _suspended; }			 set { _suspended=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isActiveExcluded		{			 get { return _isActiveExcluded; }			 set { _isActiveExcluded=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string AvatarImageType		{			 get { return _AvatarImageType; }			 set { _AvatarImageType=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string IP		{			 get { return _IP; }			 set { _IP=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 RankID		{			 get { return _RankID; }			 set { _RankID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 flags		{			 get { return _flags; }			 set { _flags=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool pmNotification		{			 get { return _pmNotification; }			 set { _pmNotification=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 points		{			 get { return _points; }			 set { _points=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool OverrideDefaultTheme		{			 get { return _OverrideDefaultTheme; }			 set { _OverrideDefaultTheme=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 UserID		{			 get { return _UserID; }			 set { _UserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public byte[] AvatarImage		{			 get { return _AvatarImage; }			 set { _AvatarImage=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Name		{			 get { return _Name; }			 set { _Name=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ProfileID		{			 get { return _ProfileID; }			 set { _ProfileID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string LanguageFile		{			 get { return _LanguageFile; }			 set { _LanguageFile=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime LastVisit		{			 get { return _LastVisit; }			 set { _LastVisit=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string ProviderUserKey		{			 get { return _ProviderUserKey; }			 set { _ProviderUserKey=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public ForumsUser()		{			TableName="ForumsUser";		}		public ForumsUser(Int64 UserID)		{			TableName="ForumsUser";			_UserID=UserID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsUser));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public ForumsUser Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsUser));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (ForumsUser)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from ForumsUser where UserID="+_UserID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_Joined =(DateTime) Internalds.Tables[0].Rows[0]["Joined"];				_TimeZone =(Int32) Internalds.Tables[0].Rows[0]["TimeZone"];				_Email = (Internalds.Tables[0].Rows[0]["Email"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["Email"]) ;				_ThemeFile = (Internalds.Tables[0].Rows[0]["ThemeFile"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["ThemeFile"]) ;				_numPosts =(Int64) Internalds.Tables[0].Rows[0]["numPosts"];				_BoardID =(Int64) Internalds.Tables[0].Rows[0]["BoardID"];				_Avatar = (Internalds.Tables[0].Rows[0]["Avatar"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["Avatar"]) ;				_isApproved = (Internalds.Tables[0].Rows[0]["isApproved"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["isApproved"]) ;				_suspended = (Internalds.Tables[0].Rows[0]["suspended"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["suspended"]) ;				_isActiveExcluded = (Internalds.Tables[0].Rows[0]["isActiveExcluded"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["isActiveExcluded"]) ;				_AvatarImageType = (Internalds.Tables[0].Rows[0]["AvatarImageType"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["AvatarImageType"]) ;				_IP = (Internalds.Tables[0].Rows[0]["IP"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["IP"]) ;				_RankID =(Int64) Internalds.Tables[0].Rows[0]["RankID"];				_flags =(Int32) Internalds.Tables[0].Rows[0]["flags"];				_pmNotification =(bool) Internalds.Tables[0].Rows[0]["pmNotification"];				_points =(Int32) Internalds.Tables[0].Rows[0]["points"];				_OverrideDefaultTheme =(bool) Internalds.Tables[0].Rows[0]["OverrideDefaultTheme"];				_UserID =(Int64) Internalds.Tables[0].Rows[0]["UserID"];				_AvatarImage = (Internalds.Tables[0].Rows[0]["AvatarImage"]==System.Convert.DBNull ? null : (byte[])Internalds.Tables[0].Rows[0]["AvatarImage"]) ;				_Name =(string) Internalds.Tables[0].Rows[0]["Name"];				_ProfileID = (Internalds.Tables[0].Rows[0]["ProfileID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["ProfileID"]) ;				_LanguageFile = (Internalds.Tables[0].Rows[0]["LanguageFile"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["LanguageFile"]) ;				_LastVisit =(DateTime) Internalds.Tables[0].Rows[0]["LastVisit"];				_ProviderUserKey = (Internalds.Tables[0].Rows[0]["ProviderUserKey"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["ProviderUserKey"]) ;				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Joined==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Joined Value can not be null ",PropertyName = "Joined",ValidationError = " " });				 //throw new Exception("Joined Value can not be null");			}			if (_Name==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Name Value can not be null ",PropertyName = "Name",ValidationError = " " });				 //throw new Exception("Name Value can not be null");			}			if (_LastVisit==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LastVisit Value can not be null ",PropertyName = "LastVisit",ValidationError = " " });				 //throw new Exception("LastVisit Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[23];			StoredProcedureParam[0]=MakeParameter("@Joined",_Joined);			StoredProcedureParam[1]=MakeParameter("@TimeZone",_TimeZone);			StoredProcedureParam[2]=MakeParameter("@Email",(_Email==string.Empty? System.Convert.DBNull : _Email));			StoredProcedureParam[3]=MakeParameter("@ThemeFile",(_ThemeFile==string.Empty? System.Convert.DBNull : _ThemeFile));			StoredProcedureParam[4]=MakeParameter("@numPosts",_numPosts);			StoredProcedureParam[5]=MakeParameter("@BoardID",_BoardID);			StoredProcedureParam[6]=MakeParameter("@Avatar",(_Avatar==string.Empty? System.Convert.DBNull : _Avatar));			StoredProcedureParam[7]=MakeParameter("@isApproved",(_isApproved==false? System.Convert.DBNull : _isApproved));			StoredProcedureParam[8]=MakeParameter("@suspended",(_suspended==DateTime.MinValue? System.Convert.DBNull : _suspended));			StoredProcedureParam[9]=MakeParameter("@isActiveExcluded",(_isActiveExcluded==false? System.Convert.DBNull : _isActiveExcluded));			StoredProcedureParam[10]=MakeParameter("@AvatarImageType",(_AvatarImageType==string.Empty? System.Convert.DBNull : _AvatarImageType));			StoredProcedureParam[11]=MakeParameter("@IP",(_IP==string.Empty? System.Convert.DBNull : _IP));			StoredProcedureParam[12]=MakeParameter("@RankID",_RankID);			StoredProcedureParam[13]=MakeParameter("@flags",_flags);			StoredProcedureParam[14]=MakeParameter("@pmNotification",_pmNotification);			StoredProcedureParam[15]=MakeParameter("@points",_points);			StoredProcedureParam[16]=MakeParameter("@OverrideDefaultTheme",_OverrideDefaultTheme);			StoredProcedureParam[17]=MakeImageParameter("@AvatarImage",(_AvatarImage==null? System.Convert.DBNull : _AvatarImage));			StoredProcedureParam[18]=MakeParameter("@Name",_Name);			StoredProcedureParam[19]=MakeParameter("@ProfileID",(_ProfileID==0? System.Convert.DBNull : _ProfileID));			StoredProcedureParam[20]=MakeParameter("@LanguageFile",(_LanguageFile==string.Empty? System.Convert.DBNull : _LanguageFile));			StoredProcedureParam[21]=MakeParameter("@LastVisit",_LastVisit);			StoredProcedureParam[22]=MakeParameter("@ProviderUserKey",(_ProviderUserKey==string.Empty? System.Convert.DBNull : _ProviderUserKey));			try			{				RunSqlCommand("[Insert_ForumsUser]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_UserID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[24];			StoredProcedureParam[0]=MakeParameter("@Joined",_Joined);			StoredProcedureParam[1]=MakeParameter("@TimeZone",_TimeZone);			StoredProcedureParam[2]=MakeParameter("@Email",(_Email==string.Empty? System.Convert.DBNull : _Email));			StoredProcedureParam[3]=MakeParameter("@ThemeFile",(_ThemeFile==string.Empty? System.Convert.DBNull : _ThemeFile));			StoredProcedureParam[4]=MakeParameter("@numPosts",_numPosts);			StoredProcedureParam[5]=MakeParameter("@BoardID",_BoardID);			StoredProcedureParam[6]=MakeParameter("@Avatar",(_Avatar==string.Empty? System.Convert.DBNull : _Avatar));			StoredProcedureParam[7]=MakeParameter("@isApproved",(_isApproved==false? System.Convert.DBNull : _isApproved));			StoredProcedureParam[8]=MakeParameter("@suspended",(_suspended==DateTime.MinValue? System.Convert.DBNull : _suspended));			StoredProcedureParam[9]=MakeParameter("@isActiveExcluded",(_isActiveExcluded==false? System.Convert.DBNull : _isActiveExcluded));			StoredProcedureParam[10]=MakeParameter("@AvatarImageType",(_AvatarImageType==string.Empty? System.Convert.DBNull : _AvatarImageType));			StoredProcedureParam[11]=MakeParameter("@IP",(_IP==string.Empty? System.Convert.DBNull : _IP));			StoredProcedureParam[12]=MakeParameter("@RankID",_RankID);			StoredProcedureParam[13]=MakeParameter("@flags",_flags);			StoredProcedureParam[14]=MakeParameter("@pmNotification",_pmNotification);			StoredProcedureParam[15]=MakeParameter("@points",_points);			StoredProcedureParam[16]=MakeParameter("@OverrideDefaultTheme",_OverrideDefaultTheme);			StoredProcedureParam[17]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[18]=MakeImageParameter("@AvatarImage",(_AvatarImage==null? System.Convert.DBNull : _AvatarImage));			StoredProcedureParam[19]=MakeParameter("@Name",_Name);			StoredProcedureParam[20]=MakeParameter("@ProfileID",(_ProfileID==0? System.Convert.DBNull : _ProfileID));			StoredProcedureParam[21]=MakeParameter("@LanguageFile",(_LanguageFile==string.Empty? System.Convert.DBNull : _LanguageFile));			StoredProcedureParam[22]=MakeParameter("@LastVisit",_LastVisit);			StoredProcedureParam[23]=MakeParameter("@ProviderUserKey",(_ProviderUserKey==string.Empty? System.Convert.DBNull : _ProviderUserKey));			try			{				RunSqlCommand("[Update_ForumsUser]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@UserID",_UserID);			try			{				RunSqlCommand("[Delete_ForumsUser]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ForumsUserDS SelectAll()		{			 Insight.Datasets.ForumsUserDS ResDS=new Insight.Datasets.ForumsUserDS();			 RunStaticSqlCommand("Select * from ForumsUser", ResDS,"ForumsUser");			 return (Insight.Datasets.ForumsUserDS) ResDS ;		}		public static Insight.Datasets.ForumsUserDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ForumsUserDS  ResDS=new Insight.Datasets.ForumsUserDS();			 RunStaticSqlCommand("Select * from ForumsUser where " + FilterBy, ResDS, "ForumsUser");			 return (Insight.Datasets.ForumsUserDS) ResDS ; 		}		#endregion	}}