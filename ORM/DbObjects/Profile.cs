using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;
using Insight.ORM.Collections;namespace Insight 	{	[Serializable]	 public partial  class Profile:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _Mobile1;		private string _Password;		private string _HomePhone1=string.Empty;		private string _LoginName;		private bool _EnableNotifications=false;		private string _Email;		private DateTime _LastLogin=DateTime.MinValue;		private Int64 _FileQouta=0;		private string _FName;		private byte[] _ProfileImage=null;		private Int64 _ProfileID;		private string _LName;		private short _SecurityRoles;		private bool _isPortalAdmin;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string Mobile1		{			 get { return _Mobile1; }			 set { _Mobile1=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Password		{			 get { return _Password; }			 set { _Password=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string HomePhone1		{			 get { return _HomePhone1; }			 set { _HomePhone1=value; }		}		/// <summary>		/// Login Name		/// </summary>		public string LoginName		{			 get { return _LoginName; }			 set { _LoginName=value; }		}		/// <summary>		/// Accept Notification (For family tree events only )		/// </summary>		public bool EnableNotifications		{			 get { return _EnableNotifications; }			 set { _EnableNotifications=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Email		{			 get { return _Email; }			 set { _Email=value; }		}		/// <summary>		/// Last time Logged in		/// </summary>		public DateTime LastLogin		{			 get { return _LastLogin; }			 set { _LastLogin=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 FileQouta		{			 get { return _FileQouta; }			 set { _FileQouta=value; }		}		/// <summary>		/// First Name		/// </summary>		public string FName		{			 get { return _FName; }			 set { _FName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public byte[] ProfileImage		{			 get { return _ProfileImage; }			 set { _ProfileImage=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ProfileID		{			 get { return _ProfileID; }			 set { _ProfileID=value; }		}		/// <summary>		/// Family Name		/// </summary>		public string LName		{			 get { return _LName; }			 set { _LName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public short SecurityRoles		{			 get { return _SecurityRoles; }			 set { _SecurityRoles=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isPortalAdmin		{			 get { return _isPortalAdmin; }			 set { _isPortalAdmin=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public Profile()		{			TableName="Profile";		}		public Profile(Int64 ProfileID)		{			TableName="Profile";			_ProfileID=ProfileID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(Profile));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public Profile Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(Profile));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (Profile)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from Profile where ProfileID="+_ProfileID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_Mobile1 =(string) Internalds.Tables[0].Rows[0]["Mobile1"];				_Password =(string) Internalds.Tables[0].Rows[0]["Password"];				_HomePhone1 = (Internalds.Tables[0].Rows[0]["HomePhone1"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["HomePhone1"]) ;				_LoginName =(string) Internalds.Tables[0].Rows[0]["LoginName"];				_EnableNotifications = (Internalds.Tables[0].Rows[0]["EnableNotifications"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["EnableNotifications"]) ;				_Email =(string) Internalds.Tables[0].Rows[0]["Email"];				_LastLogin = (Internalds.Tables[0].Rows[0]["LastLogin"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["LastLogin"]) ;				_FileQouta = (Internalds.Tables[0].Rows[0]["FileQouta"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["FileQouta"]) ;				_FName =(string) Internalds.Tables[0].Rows[0]["FName"];				_ProfileImage = (Internalds.Tables[0].Rows[0]["ProfileImage"]==System.Convert.DBNull ? null : (byte[])Internalds.Tables[0].Rows[0]["ProfileImage"]) ;				_ProfileID =(Int64) Internalds.Tables[0].Rows[0]["ProfileID"];				_LName =(string) Internalds.Tables[0].Rows[0]["LName"];				_SecurityRoles =(short) Internalds.Tables[0].Rows[0]["SecurityRoles"];				_isPortalAdmin =(bool) Internalds.Tables[0].Rows[0]["isPortalAdmin"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Mobile1==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Mobile1 Value can not be null ",PropertyName = "Mobile1",ValidationError = " " });				 //throw new Exception("Mobile1 Value can not be null");			}			if (_Password==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Password Value can not be null ",PropertyName = "Password",ValidationError = " " });				 //throw new Exception("Password Value can not be null");			}			if (_LoginName==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LoginName Value can not be null ",PropertyName = "LoginName",ValidationError = " " });				 //throw new Exception("LoginName Value can not be null");			}			if (_Email==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Email Value can not be null ",PropertyName = "Email",ValidationError = " " });				 //throw new Exception("Email Value can not be null");			}			if (_FName==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "FName Value can not be null ",PropertyName = "FName",ValidationError = " " });				 //throw new Exception("FName Value can not be null");			}			if (_LName==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LName Value can not be null ",PropertyName = "LName",ValidationError = " " });				 //throw new Exception("LName Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[13];			StoredProcedureParam[0]=MakeParameter("@Mobile1",_Mobile1);			StoredProcedureParam[1]=MakeParameter("@Password",_Password);			StoredProcedureParam[2]=MakeParameter("@HomePhone1",(_HomePhone1==string.Empty? System.Convert.DBNull : _HomePhone1));			StoredProcedureParam[3]=MakeParameter("@LoginName",_LoginName);			StoredProcedureParam[4]=MakeParameter("@EnableNotifications",(_EnableNotifications==false? System.Convert.DBNull : _EnableNotifications));			StoredProcedureParam[5]=MakeParameter("@Email",_Email);			StoredProcedureParam[6]=MakeParameter("@LastLogin",(_LastLogin==DateTime.MinValue? System.Convert.DBNull : _LastLogin));			StoredProcedureParam[7]=MakeParameter("@FileQouta",(_FileQouta==0? System.Convert.DBNull : _FileQouta));			StoredProcedureParam[8]=MakeParameter("@FName",_FName);			StoredProcedureParam[9]=MakeImageParameter("@ProfileImage",(_ProfileImage==null? System.Convert.DBNull : _ProfileImage));			StoredProcedureParam[10]=MakeParameter("@LName",_LName);			StoredProcedureParam[11]=MakeParameter("@SecurityRoles",_SecurityRoles);			StoredProcedureParam[12]=MakeParameter("@isPortalAdmin",_isPortalAdmin);			try			{				RunSqlCommand("[Insert_Profile]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_ProfileID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[14];			StoredProcedureParam[0]=MakeParameter("@Mobile1",_Mobile1);			StoredProcedureParam[1]=MakeParameter("@Password",_Password);			StoredProcedureParam[2]=MakeParameter("@HomePhone1",(_HomePhone1==string.Empty? System.Convert.DBNull : _HomePhone1));			StoredProcedureParam[3]=MakeParameter("@LoginName",_LoginName);			StoredProcedureParam[4]=MakeParameter("@EnableNotifications",(_EnableNotifications==false? System.Convert.DBNull : _EnableNotifications));			StoredProcedureParam[5]=MakeParameter("@Email",_Email);			StoredProcedureParam[6]=MakeParameter("@LastLogin",(_LastLogin==DateTime.MinValue? System.Convert.DBNull : _LastLogin));			StoredProcedureParam[7]=MakeParameter("@FileQouta",(_FileQouta==0? System.Convert.DBNull : _FileQouta));			StoredProcedureParam[8]=MakeParameter("@FName",_FName);			StoredProcedureParam[9]=MakeImageParameter("@ProfileImage",(_ProfileImage==null? System.Convert.DBNull : _ProfileImage));			StoredProcedureParam[10]=MakeParameter("@ProfileID",_ProfileID);			StoredProcedureParam[11]=MakeParameter("@LName",_LName);			StoredProcedureParam[12]=MakeParameter("@SecurityRoles",_SecurityRoles);			StoredProcedureParam[13]=MakeParameter("@isPortalAdmin",_isPortalAdmin);			try			{				RunSqlCommand("[Update_Profile]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@ProfileID",_ProfileID);			try			{				RunSqlCommand("[Delete_Profile]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ProfileDS SelectAll()		{			 Insight.Datasets.ProfileDS ResDS=new Insight.Datasets.ProfileDS();			 RunStaticSqlCommand("Select * from Profile", ResDS,"Profile");			 return (Insight.Datasets.ProfileDS) ResDS ;		}
        public static Profiles SelectAllTest()
        {
            DataSet ResDS = new DataSet();
            RunStaticSqlCommand("Select * from Profile", ResDS, "Profile");
            return new Profiles(ResDS);
        }		public static Insight.Datasets.ProfileDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ProfileDS  ResDS=new Insight.Datasets.ProfileDS();			 RunStaticSqlCommand("Select * from Profile where " + FilterBy, ResDS, "Profile");			 return (Insight.Datasets.ProfileDS) ResDS ; 		}		#endregion	}}