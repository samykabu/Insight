using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalPage:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _URL=string.Empty;		private bool _HasTemplate;		private string _Title;		private byte[] _PageTemplate=null;		private Int64 _ParentPageID=0;		private string _Description=string.Empty;		private string _ArbTitle=string.Empty;		private Int64 _PortalPageID;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string URL		{			 get { return _URL; }			 set { _URL=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool HasTemplate		{			 get { return _HasTemplate; }			 set { _HasTemplate=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Title		{			 get { return _Title; }			 set { _Title=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public byte[] PageTemplate		{			 get { return _PageTemplate; }			 set { _PageTemplate=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ParentPageID		{			 get { return _ParentPageID; }			 set { _ParentPageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Description		{			 get { return _Description; }			 set { _Description=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string ArbTitle		{			 get { return _ArbTitle; }			 set { _ArbTitle=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PortalPageID		{			 get { return _PortalPageID; }			 set { _PortalPageID=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalPage()		{			TableName="PortalPage";		}		public PortalPage(Int64 PortalPageID)		{			TableName="PortalPage";			_PortalPageID=PortalPageID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalPage));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalPage Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalPage));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalPage)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalPage where PortalPageID="+_PortalPageID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_URL = (Internalds.Tables[0].Rows[0]["URL"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["URL"]) ;				_HasTemplate =(bool) Internalds.Tables[0].Rows[0]["HasTemplate"];				_Title =(string) Internalds.Tables[0].Rows[0]["Title"];				_PageTemplate = (Internalds.Tables[0].Rows[0]["PageTemplate"]==System.Convert.DBNull ? null : (byte[])Internalds.Tables[0].Rows[0]["PageTemplate"]) ;				_ParentPageID = (Internalds.Tables[0].Rows[0]["ParentPageID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["ParentPageID"]) ;				_Description = (Internalds.Tables[0].Rows[0]["Description"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["Description"]) ;				_ArbTitle = (Internalds.Tables[0].Rows[0]["ArbTitle"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["ArbTitle"]) ;				_PortalPageID =(Int64) Internalds.Tables[0].Rows[0]["PortalPageID"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Title==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Title Value can not be null ",PropertyName = "Title",ValidationError = " " });				 //throw new Exception("Title Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[7];			StoredProcedureParam[0]=MakeParameter("@URL",(_URL==string.Empty? System.Convert.DBNull : _URL));			StoredProcedureParam[1]=MakeParameter("@HasTemplate",_HasTemplate);			StoredProcedureParam[2]=MakeParameter("@Title",_Title);			StoredProcedureParam[3]=MakeImageParameter("@PageTemplate",(_PageTemplate==null? System.Convert.DBNull : _PageTemplate));			StoredProcedureParam[4]=MakeParameter("@ParentPageID",(_ParentPageID==0? System.Convert.DBNull : _ParentPageID));			StoredProcedureParam[5]=MakeParameter("@Description",(_Description==string.Empty? System.Convert.DBNull : _Description));			StoredProcedureParam[6]=MakeParameter("@ArbTitle",(_ArbTitle==string.Empty? System.Convert.DBNull : _ArbTitle));			try			{				RunSqlCommand("[Insert_PortalPage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_PortalPageID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[8];			StoredProcedureParam[0]=MakeParameter("@URL",(_URL==string.Empty? System.Convert.DBNull : _URL));			StoredProcedureParam[1]=MakeParameter("@HasTemplate",_HasTemplate);			StoredProcedureParam[2]=MakeParameter("@Title",_Title);			StoredProcedureParam[3]=MakeImageParameter("@PageTemplate",(_PageTemplate==null? System.Convert.DBNull : _PageTemplate));			StoredProcedureParam[4]=MakeParameter("@ParentPageID",(_ParentPageID==0? System.Convert.DBNull : _ParentPageID));			StoredProcedureParam[5]=MakeParameter("@Description",(_Description==string.Empty? System.Convert.DBNull : _Description));			StoredProcedureParam[6]=MakeParameter("@ArbTitle",(_ArbTitle==string.Empty? System.Convert.DBNull : _ArbTitle));			StoredProcedureParam[7]=MakeParameter("@PortalPageID",_PortalPageID);			try			{				RunSqlCommand("[Update_PortalPage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@PortalPageID",_PortalPageID);			try			{				RunSqlCommand("[Delete_PortalPage]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalPageDS SelectAll()		{			 Insight.Datasets.PortalPageDS ResDS=new Insight.Datasets.PortalPageDS();			 RunStaticSqlCommand("Select * from PortalPage", ResDS,"PortalPage");			 return (Insight.Datasets.PortalPageDS) ResDS ;		}		public static Insight.Datasets.PortalPageDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalPageDS  ResDS=new Insight.Datasets.PortalPageDS();			 RunStaticSqlCommand("Select * from PortalPage where " + FilterBy, ResDS, "PortalPage");			 return (Insight.Datasets.PortalPageDS) ResDS ; 		}		#endregion	}}