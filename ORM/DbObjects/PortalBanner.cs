using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalBanner:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private Int32 _BannerType;		private Int64 _BannerID;		private string _Title;		private DateTime _StartIn;		private DateTime _ExpireIn=DateTime.MinValue;		private Int32 _Width;		private string _ClickURL=string.Empty;		private Int32 _Height;		private byte[] _BannerImage;		#endregion		#region Public properties		/// <summary>		/// The banner mime type (0=image,1=flash,2=video ...);		/// </summary>		public Int32 BannerType		{			 get { return _BannerType; }			 set { _BannerType=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 BannerID		{			 get { return _BannerID; }			 set { _BannerID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Title		{			 get { return _Title; }			 set { _Title=value; }		}		/// <summary>		/// Show the banner starting this date 		/// </summary>		public DateTime StartIn		{			 get { return _StartIn; }			 set { _StartIn=value; }		}		/// <summary>		/// Stop displaying the banner at this date (if null then displlayed for ever)		/// </summary>		public DateTime ExpireIn		{			 get { return _ExpireIn; }			 set { _ExpireIn=value; }		}		/// <summary>		/// Banner Width		/// </summary>		public Int32 Width		{			 get { return _Width; }			 set { _Width=value; }		}		/// <summary>		/// a URL to navigate to if the banner is clicked		/// </summary>		public string ClickURL		{			 get { return _ClickURL; }			 set { _ClickURL=value; }		}		/// <summary>		/// Banner Height		/// </summary>		public Int32 Height		{			 get { return _Height; }			 set { _Height=value; }		}		/// <summary>		/// The actual banner binary image		/// </summary>		public byte[] BannerImage		{			 get { return _BannerImage; }			 set { _BannerImage=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalBanner()		{			TableName="PortalBanner";		}		public PortalBanner(Int64 BannerID)		{			TableName="PortalBanner";			_BannerID=BannerID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalBanner));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalBanner Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalBanner));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalBanner)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalBanner where BannerID="+_BannerID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_BannerType =(Int32) Internalds.Tables[0].Rows[0]["BannerType"];				_BannerID =(Int64) Internalds.Tables[0].Rows[0]["BannerID"];				_Title =(string) Internalds.Tables[0].Rows[0]["Title"];				_StartIn =(DateTime) Internalds.Tables[0].Rows[0]["StartIn"];				_ExpireIn = (Internalds.Tables[0].Rows[0]["ExpireIn"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["ExpireIn"]) ;				_Width =(Int32) Internalds.Tables[0].Rows[0]["Width"];				_ClickURL = (Internalds.Tables[0].Rows[0]["ClickURL"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["ClickURL"]) ;				_Height =(Int32) Internalds.Tables[0].Rows[0]["Height"];				_BannerImage =(byte[]) Internalds.Tables[0].Rows[0]["BannerImage"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Title==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Title Value can not be null ",PropertyName = "Title",ValidationError = " " });				 //throw new Exception("Title Value can not be null");			}			if (_StartIn==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "StartIn Value can not be null ",PropertyName = "StartIn",ValidationError = " " });				 //throw new Exception("StartIn Value can not be null");			}			if (_BannerImage==null)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "BannerImage Value can not be null ",PropertyName = "BannerImage",ValidationError = " " });				 //throw new Exception("BannerImage Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[8];			StoredProcedureParam[0]=MakeParameter("@BannerType",_BannerType);			StoredProcedureParam[1]=MakeParameter("@Title",_Title);			StoredProcedureParam[2]=MakeParameter("@StartIn",_StartIn);			StoredProcedureParam[3]=MakeParameter("@ExpireIn",(_ExpireIn==DateTime.MinValue? System.Convert.DBNull : _ExpireIn));			StoredProcedureParam[4]=MakeParameter("@Width",_Width);			StoredProcedureParam[5]=MakeParameter("@ClickURL",(_ClickURL==string.Empty? System.Convert.DBNull : _ClickURL));			StoredProcedureParam[6]=MakeParameter("@Height",_Height);			StoredProcedureParam[7]=MakeImageParameter("@BannerImage",_BannerImage);			try			{				RunSqlCommand("[Insert_PortalBanner]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_BannerID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[9];			StoredProcedureParam[0]=MakeParameter("@BannerType",_BannerType);			StoredProcedureParam[1]=MakeParameter("@BannerID",_BannerID);			StoredProcedureParam[2]=MakeParameter("@Title",_Title);			StoredProcedureParam[3]=MakeParameter("@StartIn",_StartIn);			StoredProcedureParam[4]=MakeParameter("@ExpireIn",(_ExpireIn==DateTime.MinValue? System.Convert.DBNull : _ExpireIn));			StoredProcedureParam[5]=MakeParameter("@Width",_Width);			StoredProcedureParam[6]=MakeParameter("@ClickURL",(_ClickURL==string.Empty? System.Convert.DBNull : _ClickURL));			StoredProcedureParam[7]=MakeParameter("@Height",_Height);			StoredProcedureParam[8]=MakeImageParameter("@BannerImage",_BannerImage);			try			{				RunSqlCommand("[Update_PortalBanner]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@BannerID",_BannerID);			try			{				RunSqlCommand("[Delete_PortalBanner]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalBannerDS SelectAll()		{			 Insight.Datasets.PortalBannerDS ResDS=new Insight.Datasets.PortalBannerDS();			 RunStaticSqlCommand("Select * from PortalBanner", ResDS,"PortalBanner");			 return (Insight.Datasets.PortalBannerDS) ResDS ;		}		public static Insight.Datasets.PortalBannerDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalBannerDS  ResDS=new Insight.Datasets.PortalBannerDS();			 RunStaticSqlCommand("Select * from PortalBanner where " + FilterBy, ResDS, "PortalBanner");			 return (Insight.Datasets.PortalBannerDS) ResDS ; 		}		#endregion	}}