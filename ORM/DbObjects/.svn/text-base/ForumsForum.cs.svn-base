using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class ForumsForum:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _Name;		private string _Description;		private Int32 _NumPosts;		private Int32 _SortOrder;		private Int32 _NumTopics;		private string _RemoteURL=string.Empty;		private Int64 _ParentID=0;		private DateTime _LastPosted=DateTime.MinValue;		private Int64 _LastTopicID=0;		private Int32 _Flags=0;		private Int64 _CategoryID;		private Int64 _LastMessageID=0;		private string _ThemeURL=string.Empty;		private Int64 _ForumID;		private string _LastUserName=string.Empty;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string Name		{			 get { return _Name; }			 set { _Name=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Description		{			 get { return _Description; }			 set { _Description=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 NumPosts		{			 get { return _NumPosts; }			 set { _NumPosts=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 SortOrder		{			 get { return _SortOrder; }			 set { _SortOrder=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 NumTopics		{			 get { return _NumTopics; }			 set { _NumTopics=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string RemoteURL		{			 get { return _RemoteURL; }			 set { _RemoteURL=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ParentID		{			 get { return _ParentID; }			 set { _ParentID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime LastPosted		{			 get { return _LastPosted; }			 set { _LastPosted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 LastTopicID		{			 get { return _LastTopicID; }			 set { _LastTopicID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Flags		{			 get { return _Flags; }			 set { _Flags=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 CategoryID		{			 get { return _CategoryID; }			 set { _CategoryID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 LastMessageID		{			 get { return _LastMessageID; }			 set { _LastMessageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string ThemeURL		{			 get { return _ThemeURL; }			 set { _ThemeURL=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ForumID		{			 get { return _ForumID; }			 set { _ForumID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string LastUserName		{			 get { return _LastUserName; }			 set { _LastUserName=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public ForumsForum()		{			TableName="ForumsForum";		}		public ForumsForum(Int64 ForumID)		{			TableName="ForumsForum";			_ForumID=ForumID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsForum));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public ForumsForum Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsForum));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (ForumsForum)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from ForumsForum where ForumID="+_ForumID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_Name =(string) Internalds.Tables[0].Rows[0]["Name"];				_Description =(string) Internalds.Tables[0].Rows[0]["Description"];				_NumPosts =(Int32) Internalds.Tables[0].Rows[0]["NumPosts"];				_SortOrder =(Int32) Internalds.Tables[0].Rows[0]["SortOrder"];				_NumTopics =(Int32) Internalds.Tables[0].Rows[0]["NumTopics"];				_RemoteURL = (Internalds.Tables[0].Rows[0]["RemoteURL"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["RemoteURL"]) ;				_ParentID = (Internalds.Tables[0].Rows[0]["ParentID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["ParentID"]) ;				_LastPosted = (Internalds.Tables[0].Rows[0]["LastPosted"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["LastPosted"]) ;				_LastTopicID = (Internalds.Tables[0].Rows[0]["LastTopicID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["LastTopicID"]) ;				_Flags = (Internalds.Tables[0].Rows[0]["Flags"]==System.Convert.DBNull ? 0 : (Int32)Internalds.Tables[0].Rows[0]["Flags"]) ;				_CategoryID =(Int64) Internalds.Tables[0].Rows[0]["CategoryID"];				_LastMessageID = (Internalds.Tables[0].Rows[0]["LastMessageID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["LastMessageID"]) ;				_ThemeURL = (Internalds.Tables[0].Rows[0]["ThemeURL"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["ThemeURL"]) ;				_ForumID =(Int64) Internalds.Tables[0].Rows[0]["ForumID"];				_LastUserName = (Internalds.Tables[0].Rows[0]["LastUserName"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["LastUserName"]) ;				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Name==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Name Value can not be null ",PropertyName = "Name",ValidationError = " " });				 //throw new Exception("Name Value can not be null");			}			if (_Description==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Description Value can not be null ",PropertyName = "Description",ValidationError = " " });				 //throw new Exception("Description Value can not be null");			}			if (_CategoryID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "CategoryID Value can not be null ",PropertyName = "CategoryID",ValidationError = " " });				 //throw new Exception("CategoryID Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[14];			StoredProcedureParam[0]=MakeParameter("@Name",_Name);			StoredProcedureParam[1]=MakeParameter("@Description",_Description);			StoredProcedureParam[2]=MakeParameter("@NumPosts",_NumPosts);			StoredProcedureParam[3]=MakeParameter("@SortOrder",_SortOrder);			StoredProcedureParam[4]=MakeParameter("@NumTopics",_NumTopics);			StoredProcedureParam[5]=MakeParameter("@RemoteURL",(_RemoteURL==string.Empty? System.Convert.DBNull : _RemoteURL));			StoredProcedureParam[6]=MakeParameter("@ParentID",(_ParentID==0? System.Convert.DBNull : _ParentID));			StoredProcedureParam[7]=MakeParameter("@LastPosted",(_LastPosted==DateTime.MinValue? System.Convert.DBNull : _LastPosted));			StoredProcedureParam[8]=MakeParameter("@LastTopicID",(_LastTopicID==0? System.Convert.DBNull : _LastTopicID));			StoredProcedureParam[9]=MakeParameter("@Flags",(_Flags==0? System.Convert.DBNull : _Flags));			StoredProcedureParam[10]=MakeParameter("@CategoryID",_CategoryID);			StoredProcedureParam[11]=MakeParameter("@LastMessageID",(_LastMessageID==0? System.Convert.DBNull : _LastMessageID));			StoredProcedureParam[12]=MakeParameter("@ThemeURL",(_ThemeURL==string.Empty? System.Convert.DBNull : _ThemeURL));			StoredProcedureParam[13]=MakeParameter("@LastUserName",(_LastUserName==string.Empty? System.Convert.DBNull : _LastUserName));			try			{				RunSqlCommand("[Insert_ForumsForum]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_ForumID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[15];			StoredProcedureParam[0]=MakeParameter("@Name",_Name);			StoredProcedureParam[1]=MakeParameter("@Description",_Description);			StoredProcedureParam[2]=MakeParameter("@NumPosts",_NumPosts);			StoredProcedureParam[3]=MakeParameter("@SortOrder",_SortOrder);			StoredProcedureParam[4]=MakeParameter("@NumTopics",_NumTopics);			StoredProcedureParam[5]=MakeParameter("@RemoteURL",(_RemoteURL==string.Empty? System.Convert.DBNull : _RemoteURL));			StoredProcedureParam[6]=MakeParameter("@ParentID",(_ParentID==0? System.Convert.DBNull : _ParentID));			StoredProcedureParam[7]=MakeParameter("@LastPosted",(_LastPosted==DateTime.MinValue? System.Convert.DBNull : _LastPosted));			StoredProcedureParam[8]=MakeParameter("@LastTopicID",(_LastTopicID==0? System.Convert.DBNull : _LastTopicID));			StoredProcedureParam[9]=MakeParameter("@Flags",(_Flags==0? System.Convert.DBNull : _Flags));			StoredProcedureParam[10]=MakeParameter("@CategoryID",_CategoryID);			StoredProcedureParam[11]=MakeParameter("@LastMessageID",(_LastMessageID==0? System.Convert.DBNull : _LastMessageID));			StoredProcedureParam[12]=MakeParameter("@ThemeURL",(_ThemeURL==string.Empty? System.Convert.DBNull : _ThemeURL));			StoredProcedureParam[13]=MakeParameter("@ForumID",_ForumID);			StoredProcedureParam[14]=MakeParameter("@LastUserName",(_LastUserName==string.Empty? System.Convert.DBNull : _LastUserName));			try			{				RunSqlCommand("[Update_ForumsForum]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@ForumID",_ForumID);			try			{				RunSqlCommand("[Delete_ForumsForum]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ForumsForumDS SelectAll()		{			 Insight.Datasets.ForumsForumDS ResDS=new Insight.Datasets.ForumsForumDS();			 RunStaticSqlCommand("Select * from ForumsForum", ResDS,"ForumsForum");			 return (Insight.Datasets.ForumsForumDS) ResDS ;		}		public static Insight.Datasets.ForumsForumDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ForumsForumDS  ResDS=new Insight.Datasets.ForumsForumDS();			 RunStaticSqlCommand("Select * from ForumsForum where " + FilterBy, ResDS, "ForumsForum");			 return (Insight.Datasets.ForumsForumDS) ResDS ; 		}		#endregion	}}