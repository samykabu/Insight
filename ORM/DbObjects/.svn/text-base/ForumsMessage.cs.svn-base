using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class ForumsMessage:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _UserName;		private string _EditReason=string.Empty;		private string _Message;		private bool _isModeratorChanged;		private bool _isApproved;		private DateTime _Edited=DateTime.MinValue;		private Int32 _Position;		private Int64 _MessageID;		private string _IP=string.Empty;		private string _DleteReason=string.Empty;		private bool _isDeleted;		private Int64 _ReplyTo=0;		private Int64 _UserID;		private DateTime _Posted;		private Int32 _Flags;		private Int64 _TopicID;		private Int32 _Indent;		private string _Title;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string UserName		{			 get { return _UserName; }			 set { _UserName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string EditReason		{			 get { return _EditReason; }			 set { _EditReason=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Message		{			 get { return _Message; }			 set { _Message=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isModeratorChanged		{			 get { return _isModeratorChanged; }			 set { _isModeratorChanged=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isApproved		{			 get { return _isApproved; }			 set { _isApproved=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime Edited		{			 get { return _Edited; }			 set { _Edited=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Position		{			 get { return _Position; }			 set { _Position=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 MessageID		{			 get { return _MessageID; }			 set { _MessageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string IP		{			 get { return _IP; }			 set { _IP=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string DleteReason		{			 get { return _DleteReason; }			 set { _DleteReason=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isDeleted		{			 get { return _isDeleted; }			 set { _isDeleted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ReplyTo		{			 get { return _ReplyTo; }			 set { _ReplyTo=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 UserID		{			 get { return _UserID; }			 set { _UserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime Posted		{			 get { return _Posted; }			 set { _Posted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Flags		{			 get { return _Flags; }			 set { _Flags=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 TopicID		{			 get { return _TopicID; }			 set { _TopicID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Indent		{			 get { return _Indent; }			 set { _Indent=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Title		{			 get { return _Title; }			 set { _Title=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public ForumsMessage()		{			TableName="ForumsMessage";		}		public ForumsMessage(Int64 MessageID)		{			TableName="ForumsMessage";			_MessageID=MessageID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsMessage));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public ForumsMessage Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsMessage));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (ForumsMessage)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from ForumsMessage where MessageID="+_MessageID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_UserName =(string) Internalds.Tables[0].Rows[0]["UserName"];				_EditReason = (Internalds.Tables[0].Rows[0]["EditReason"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["EditReason"]) ;				_Message =(string) Internalds.Tables[0].Rows[0]["Message"];				_isModeratorChanged =(bool) Internalds.Tables[0].Rows[0]["isModeratorChanged"];				_isApproved =(bool) Internalds.Tables[0].Rows[0]["isApproved"];				_Edited = (Internalds.Tables[0].Rows[0]["Edited"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["Edited"]) ;				_Position =(Int32) Internalds.Tables[0].Rows[0]["Position"];				_MessageID =(Int64) Internalds.Tables[0].Rows[0]["MessageID"];				_IP = (Internalds.Tables[0].Rows[0]["IP"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["IP"]) ;				_DleteReason = (Internalds.Tables[0].Rows[0]["DleteReason"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["DleteReason"]) ;				_isDeleted =(bool) Internalds.Tables[0].Rows[0]["isDeleted"];				_ReplyTo = (Internalds.Tables[0].Rows[0]["ReplyTo"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["ReplyTo"]) ;				_UserID =(Int64) Internalds.Tables[0].Rows[0]["UserID"];				_Posted =(DateTime) Internalds.Tables[0].Rows[0]["Posted"];				_Flags =(Int32) Internalds.Tables[0].Rows[0]["Flags"];				_TopicID =(Int64) Internalds.Tables[0].Rows[0]["TopicID"];				_Indent =(Int32) Internalds.Tables[0].Rows[0]["Indent"];				_Title =(string) Internalds.Tables[0].Rows[0]["Title"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_UserName==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "UserName Value can not be null ",PropertyName = "UserName",ValidationError = " " });				 //throw new Exception("UserName Value can not be null");			}			if (_Message==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Message Value can not be null ",PropertyName = "Message",ValidationError = " " });				 //throw new Exception("Message Value can not be null");			}			if (_UserID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "UserID Value can not be null ",PropertyName = "UserID",ValidationError = " " });				 //throw new Exception("UserID Value can not be null");			}			if (_Posted==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Posted Value can not be null ",PropertyName = "Posted",ValidationError = " " });				 //throw new Exception("Posted Value can not be null");			}			if (_TopicID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "TopicID Value can not be null ",PropertyName = "TopicID",ValidationError = " " });				 //throw new Exception("TopicID Value can not be null");			}			if (_Title==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Title Value can not be null ",PropertyName = "Title",ValidationError = " " });				 //throw new Exception("Title Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[17];			StoredProcedureParam[0]=MakeParameter("@UserName",_UserName);			StoredProcedureParam[1]=MakeParameter("@EditReason",(_EditReason==string.Empty? System.Convert.DBNull : _EditReason));			StoredProcedureParam[2]=MakeParameter("@Message",_Message);			StoredProcedureParam[3]=MakeParameter("@isModeratorChanged",_isModeratorChanged);			StoredProcedureParam[4]=MakeParameter("@isApproved",_isApproved);			StoredProcedureParam[5]=MakeParameter("@Edited",(_Edited==DateTime.MinValue? System.Convert.DBNull : _Edited));			StoredProcedureParam[6]=MakeParameter("@Position",_Position);			StoredProcedureParam[7]=MakeParameter("@IP",(_IP==string.Empty? System.Convert.DBNull : _IP));			StoredProcedureParam[8]=MakeParameter("@DleteReason",(_DleteReason==string.Empty? System.Convert.DBNull : _DleteReason));			StoredProcedureParam[9]=MakeParameter("@isDeleted",_isDeleted);			StoredProcedureParam[10]=MakeParameter("@ReplyTo",(_ReplyTo==0? System.Convert.DBNull : _ReplyTo));			StoredProcedureParam[11]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[12]=MakeParameter("@Posted",_Posted);			StoredProcedureParam[13]=MakeParameter("@Flags",_Flags);			StoredProcedureParam[14]=MakeParameter("@TopicID",_TopicID);			StoredProcedureParam[15]=MakeParameter("@Indent",_Indent);			StoredProcedureParam[16]=MakeParameter("@Title",_Title);			try			{				RunSqlCommand("[Insert_ForumsMessage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_MessageID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[18];			StoredProcedureParam[0]=MakeParameter("@UserName",_UserName);			StoredProcedureParam[1]=MakeParameter("@EditReason",(_EditReason==string.Empty? System.Convert.DBNull : _EditReason));			StoredProcedureParam[2]=MakeParameter("@Message",_Message);			StoredProcedureParam[3]=MakeParameter("@isModeratorChanged",_isModeratorChanged);			StoredProcedureParam[4]=MakeParameter("@isApproved",_isApproved);			StoredProcedureParam[5]=MakeParameter("@Edited",(_Edited==DateTime.MinValue? System.Convert.DBNull : _Edited));			StoredProcedureParam[6]=MakeParameter("@Position",_Position);			StoredProcedureParam[7]=MakeParameter("@MessageID",_MessageID);			StoredProcedureParam[8]=MakeParameter("@IP",(_IP==string.Empty? System.Convert.DBNull : _IP));			StoredProcedureParam[9]=MakeParameter("@DleteReason",(_DleteReason==string.Empty? System.Convert.DBNull : _DleteReason));			StoredProcedureParam[10]=MakeParameter("@isDeleted",_isDeleted);			StoredProcedureParam[11]=MakeParameter("@ReplyTo",(_ReplyTo==0? System.Convert.DBNull : _ReplyTo));			StoredProcedureParam[12]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[13]=MakeParameter("@Posted",_Posted);			StoredProcedureParam[14]=MakeParameter("@Flags",_Flags);			StoredProcedureParam[15]=MakeParameter("@TopicID",_TopicID);			StoredProcedureParam[16]=MakeParameter("@Indent",_Indent);			StoredProcedureParam[17]=MakeParameter("@Title",_Title);			try			{				RunSqlCommand("[Update_ForumsMessage]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@MessageID",_MessageID);			try			{				RunSqlCommand("[Delete_ForumsMessage]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ForumsMessageDS SelectAll()		{			 Insight.Datasets.ForumsMessageDS ResDS=new Insight.Datasets.ForumsMessageDS();			 RunStaticSqlCommand("Select * from ForumsMessage", ResDS,"ForumsMessage");			 return (Insight.Datasets.ForumsMessageDS) ResDS ;		}		public static Insight.Datasets.ForumsMessageDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ForumsMessageDS  ResDS=new Insight.Datasets.ForumsMessageDS();			 RunStaticSqlCommand("Select * from ForumsMessage where " + FilterBy, ResDS, "ForumsMessage");			 return (Insight.Datasets.ForumsMessageDS) ResDS ; 		}		#endregion	}}