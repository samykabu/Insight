using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalArticleComments:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _Comment;		private string _Title;		private DateTime _LastEditedDate;		private DateTime _PublishedDate;		private string _UserName=string.Empty;		private Int64 _ArticleID;		private Int64 _ArticleCommentID;		private Int64 _UserID;		private string _avatarurl=string.Empty;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string Comment		{			 get { return _Comment; }			 set { _Comment=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Title		{			 get { return _Title; }			 set { _Title=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime LastEditedDate		{			 get { return _LastEditedDate; }			 set { _LastEditedDate=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime PublishedDate		{			 get { return _PublishedDate; }			 set { _PublishedDate=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string UserName		{			 get { return _UserName; }			 set { _UserName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ArticleID		{			 get { return _ArticleID; }			 set { _ArticleID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ArticleCommentID		{			 get { return _ArticleCommentID; }			 set { _ArticleCommentID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 UserID		{			 get { return _UserID; }			 set { _UserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string avatarurl		{			 get { return _avatarurl; }			 set { _avatarurl=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalArticleComments()		{			TableName="PortalArticleComments";		}		public PortalArticleComments(Int64 ArticleCommentID)		{			TableName="PortalArticleComments";			_ArticleCommentID=ArticleCommentID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleComments));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalArticleComments Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleComments));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalArticleComments)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalArticleComments where ArticleCommentID="+_ArticleCommentID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_Comment =(string) Internalds.Tables[0].Rows[0]["Comment"];				_Title =(string) Internalds.Tables[0].Rows[0]["Title"];				_LastEditedDate =(DateTime) Internalds.Tables[0].Rows[0]["LastEditedDate"];				_PublishedDate =(DateTime) Internalds.Tables[0].Rows[0]["PublishedDate"];				_UserName = (Internalds.Tables[0].Rows[0]["UserName"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["UserName"]) ;				_ArticleID =(Int64) Internalds.Tables[0].Rows[0]["ArticleID"];				_ArticleCommentID =(Int64) Internalds.Tables[0].Rows[0]["ArticleCommentID"];				_UserID =(Int64) Internalds.Tables[0].Rows[0]["UserID"];				_avatarurl = (Internalds.Tables[0].Rows[0]["avatarurl"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["avatarurl"]) ;				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Comment==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Comment Value can not be null ",PropertyName = "Comment",ValidationError = " " });				 //throw new Exception("Comment Value can not be null");			}			if (_Title==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Title Value can not be null ",PropertyName = "Title",ValidationError = " " });				 //throw new Exception("Title Value can not be null");			}			if (_LastEditedDate==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LastEditedDate Value can not be null ",PropertyName = "LastEditedDate",ValidationError = " " });				 //throw new Exception("LastEditedDate Value can not be null");			}			if (_PublishedDate==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "PublishedDate Value can not be null ",PropertyName = "PublishedDate",ValidationError = " " });				 //throw new Exception("PublishedDate Value can not be null");			}			if (_ArticleID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "ArticleID Value can not be null ",PropertyName = "ArticleID",ValidationError = " " });				 //throw new Exception("ArticleID Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[8];			StoredProcedureParam[0]=MakeParameter("@Comment",_Comment);			StoredProcedureParam[1]=MakeParameter("@Title",_Title);			StoredProcedureParam[2]=MakeParameter("@LastEditedDate",_LastEditedDate);			StoredProcedureParam[3]=MakeParameter("@PublishedDate",_PublishedDate);			StoredProcedureParam[4]=MakeParameter("@UserName",(_UserName==string.Empty? System.Convert.DBNull : _UserName));			StoredProcedureParam[5]=MakeParameter("@ArticleID",_ArticleID);			StoredProcedureParam[6]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[7]=MakeParameter("@avatarurl",(_avatarurl==string.Empty? System.Convert.DBNull : _avatarurl));			try			{				RunSqlCommand("[Insert_PortalArticleComments]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_ArticleCommentID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[9];			StoredProcedureParam[0]=MakeParameter("@Comment",_Comment);			StoredProcedureParam[1]=MakeParameter("@Title",_Title);			StoredProcedureParam[2]=MakeParameter("@LastEditedDate",_LastEditedDate);			StoredProcedureParam[3]=MakeParameter("@PublishedDate",_PublishedDate);			StoredProcedureParam[4]=MakeParameter("@UserName",(_UserName==string.Empty? System.Convert.DBNull : _UserName));			StoredProcedureParam[5]=MakeParameter("@ArticleID",_ArticleID);			StoredProcedureParam[6]=MakeParameter("@ArticleCommentID",_ArticleCommentID);			StoredProcedureParam[7]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[8]=MakeParameter("@avatarurl",(_avatarurl==string.Empty? System.Convert.DBNull : _avatarurl));			try			{				RunSqlCommand("[Update_PortalArticleComments]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@ArticleCommentID",_ArticleCommentID);			try			{				RunSqlCommand("[Delete_PortalArticleComments]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalArticleCommentsDS SelectAll()		{			 Insight.Datasets.PortalArticleCommentsDS ResDS=new Insight.Datasets.PortalArticleCommentsDS();			 RunStaticSqlCommand("Select * from PortalArticleComments", ResDS,"PortalArticleComments");			 return (Insight.Datasets.PortalArticleCommentsDS) ResDS ;		}		public static Insight.Datasets.PortalArticleCommentsDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalArticleCommentsDS  ResDS=new Insight.Datasets.PortalArticleCommentsDS();			 RunStaticSqlCommand("Select * from PortalArticleComments where " + FilterBy, ResDS, "PortalArticleComments");			 return (Insight.Datasets.PortalArticleCommentsDS) ResDS ; 		}		#endregion	}}