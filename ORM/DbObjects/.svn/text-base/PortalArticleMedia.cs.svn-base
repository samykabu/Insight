using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalArticleMedia:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _Caption=string.Empty;		private string _KeyWords=string.Empty;		private byte[] _MediaContent;		private Int64 _PortalArticleMediaID;		private string _MIME;		private Int64 _PortalArticleID;		private byte[] _SnapShoot=null;		private DateTime _AddedIn;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string Caption		{			 get { return _Caption; }			 set { _Caption=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string KeyWords		{			 get { return _KeyWords; }			 set { _KeyWords=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public byte[] MediaContent		{			 get { return _MediaContent; }			 set { _MediaContent=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PortalArticleMediaID		{			 get { return _PortalArticleMediaID; }			 set { _PortalArticleMediaID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string MIME		{			 get { return _MIME; }			 set { _MIME=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PortalArticleID		{			 get { return _PortalArticleID; }			 set { _PortalArticleID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public byte[] SnapShoot		{			 get { return _SnapShoot; }			 set { _SnapShoot=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime AddedIn		{			 get { return _AddedIn; }			 set { _AddedIn=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalArticleMedia()		{			TableName="PortalArticleMedia";		}		public PortalArticleMedia(Int64 PortalArticleMediaID)		{			TableName="PortalArticleMedia";			_PortalArticleMediaID=PortalArticleMediaID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleMedia));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalArticleMedia Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleMedia));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalArticleMedia)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalArticleMedia where PortalArticleMediaID="+_PortalArticleMediaID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_Caption = (Internalds.Tables[0].Rows[0]["Caption"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["Caption"]) ;				_KeyWords = (Internalds.Tables[0].Rows[0]["KeyWords"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["KeyWords"]) ;				_MediaContent =(byte[]) Internalds.Tables[0].Rows[0]["MediaContent"];				_PortalArticleMediaID =(Int64) Internalds.Tables[0].Rows[0]["PortalArticleMediaID"];				_MIME =(string) Internalds.Tables[0].Rows[0]["MIME"];				_PortalArticleID =(Int64) Internalds.Tables[0].Rows[0]["PortalArticleID"];				_SnapShoot = (Internalds.Tables[0].Rows[0]["SnapShoot"]==System.Convert.DBNull ? null : (byte[])Internalds.Tables[0].Rows[0]["SnapShoot"]) ;				_AddedIn =(DateTime) Internalds.Tables[0].Rows[0]["AddedIn"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_MediaContent==null)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "MediaContent Value can not be null ",PropertyName = "MediaContent",ValidationError = " " });				 //throw new Exception("MediaContent Value can not be null");			}			if (_MIME==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "MIME Value can not be null ",PropertyName = "MIME",ValidationError = " " });				 //throw new Exception("MIME Value can not be null");			}			if (_PortalArticleID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "PortalArticleID Value can not be null ",PropertyName = "PortalArticleID",ValidationError = " " });				 //throw new Exception("PortalArticleID Value can not be null");			}			if (_AddedIn==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "AddedIn Value can not be null ",PropertyName = "AddedIn",ValidationError = " " });				 //throw new Exception("AddedIn Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[7];			StoredProcedureParam[0]=MakeParameter("@Caption",(_Caption==string.Empty? System.Convert.DBNull : _Caption));			StoredProcedureParam[1]=MakeParameter("@KeyWords",(_KeyWords==string.Empty? System.Convert.DBNull : _KeyWords));			StoredProcedureParam[2]=MakeImageParameter("@MediaContent",_MediaContent);			StoredProcedureParam[3]=MakeParameter("@MIME",_MIME);			StoredProcedureParam[4]=MakeParameter("@PortalArticleID",_PortalArticleID);			StoredProcedureParam[5]=MakeImageParameter("@SnapShoot",(_SnapShoot==null? System.Convert.DBNull : _SnapShoot));			StoredProcedureParam[6]=MakeParameter("@AddedIn",_AddedIn);			try			{				RunSqlCommand("[Insert_PortalArticleMedia]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_PortalArticleMediaID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[8];			StoredProcedureParam[0]=MakeParameter("@Caption",(_Caption==string.Empty? System.Convert.DBNull : _Caption));			StoredProcedureParam[1]=MakeParameter("@KeyWords",(_KeyWords==string.Empty? System.Convert.DBNull : _KeyWords));			StoredProcedureParam[2]=MakeImageParameter("@MediaContent",_MediaContent);			StoredProcedureParam[3]=MakeParameter("@PortalArticleMediaID",_PortalArticleMediaID);			StoredProcedureParam[4]=MakeParameter("@MIME",_MIME);			StoredProcedureParam[5]=MakeParameter("@PortalArticleID",_PortalArticleID);			StoredProcedureParam[6]=MakeImageParameter("@SnapShoot",(_SnapShoot==null? System.Convert.DBNull : _SnapShoot));			StoredProcedureParam[7]=MakeParameter("@AddedIn",_AddedIn);			try			{				RunSqlCommand("[Update_PortalArticleMedia]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@PortalArticleMediaID",_PortalArticleMediaID);			try			{				RunSqlCommand("[Delete_PortalArticleMedia]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalArticleMediaDS SelectAll()		{			 Insight.Datasets.PortalArticleMediaDS ResDS=new Insight.Datasets.PortalArticleMediaDS();			 RunStaticSqlCommand("Select * from PortalArticleMedia", ResDS,"PortalArticleMedia");			 return (Insight.Datasets.PortalArticleMediaDS) ResDS ;		}		public static Insight.Datasets.PortalArticleMediaDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalArticleMediaDS  ResDS=new Insight.Datasets.PortalArticleMediaDS();			 RunStaticSqlCommand("Select * from PortalArticleMedia where " + FilterBy, ResDS, "PortalArticleMedia");			 return (Insight.Datasets.PortalArticleMediaDS) ResDS ; 		}		#endregion	}}