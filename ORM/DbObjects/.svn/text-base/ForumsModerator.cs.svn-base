using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class ForumsModerator:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private Int64 _UserID;		private DateTime _Invited=DateTime.MinValue;		private bool _Accepted=false;		private Int64 _ForumID;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 UserID		{			 get { return _UserID; }			 set { _UserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime Invited		{			 get { return _Invited; }			 set { _Invited=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool Accepted		{			 get { return _Accepted; }			 set { _Accepted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ForumID		{			 get { return _ForumID; }			 set { _ForumID=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public ForumsModerator()		{			TableName="ForumsModerator";		}		public ForumsModerator(Int64 UserID,Int64 ForumID)		{			TableName="ForumsModerator";			_UserID=UserID;			_ForumID=ForumID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsModerator));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public ForumsModerator Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsModerator));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (ForumsModerator)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from ForumsModerator where UserID="+_UserID.ToString() +" and ForumID="+_ForumID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_UserID =(Int64) Internalds.Tables[0].Rows[0]["UserID"];				_Invited = (Internalds.Tables[0].Rows[0]["Invited"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["Invited"]) ;				_Accepted = (Internalds.Tables[0].Rows[0]["Accepted"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["Accepted"]) ;				_ForumID =(Int64) Internalds.Tables[0].Rows[0]["ForumID"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_ForumID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "ForumID Value can not be null ",PropertyName = "ForumID",ValidationError = " " });				 //throw new Exception("ForumID Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[4];			StoredProcedureParam[0]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[1]=MakeImageParameter("@Invited",(_Invited==DateTime.MinValue? System.Convert.DBNull : _Invited));			StoredProcedureParam[2]=MakeImageParameter("@Accepted",(_Accepted==false? System.Convert.DBNull : _Accepted));			StoredProcedureParam[3]=MakeParameter("@ForumID",_ForumID);			try			{				RunSqlCommand("[Insert_ForumsModerator]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[4];			StoredProcedureParam[0]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[1]=MakeParameter("@Invited",(_Invited==DateTime.MinValue? System.Convert.DBNull : _Invited));			StoredProcedureParam[2]=MakeParameter("@Accepted",(_Accepted==false? System.Convert.DBNull : _Accepted));			StoredProcedureParam[3]=MakeParameter("@ForumID",_ForumID);			try			{				RunSqlCommand("[Update_ForumsModerator]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[2];			StoredProcedureParam[0]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[1]=MakeParameter("@ForumID",_ForumID);			try			{				RunSqlCommand("[Delete_ForumsModerator]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ForumsModeratorDS SelectAll()		{			 Insight.Datasets.ForumsModeratorDS ResDS=new Insight.Datasets.ForumsModeratorDS();			 RunStaticSqlCommand("Select * from ForumsModerator", ResDS,"ForumsModerator");			 return (Insight.Datasets.ForumsModeratorDS) ResDS ;		}		public static Insight.Datasets.ForumsModeratorDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ForumsModeratorDS  ResDS=new Insight.Datasets.ForumsModeratorDS();			 RunStaticSqlCommand("Select * from ForumsModerator where " + FilterBy, ResDS, "ForumsModerator");			 return (Insight.Datasets.ForumsModeratorDS) ResDS ; 		}		#endregion	}}