using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalArticleTranslation:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private Int64 _TranslationID;		private Int64 _ArticleID;		private Int64 _LanguageID;		private Int64 _TranslatedArticleID;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 TranslationID		{			 get { return _TranslationID; }			 set { _TranslationID=value; }		}		/// <summary>		/// Default Language article ID		/// </summary>		public Int64 ArticleID		{			 get { return _ArticleID; }			 set { _ArticleID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 LanguageID		{			 get { return _LanguageID; }			 set { _LanguageID=value; }		}		/// <summary>		/// Translation Language ID		/// </summary>		public Int64 TranslatedArticleID		{			 get { return _TranslatedArticleID; }			 set { _TranslatedArticleID=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalArticleTranslation()		{			TableName="PortalArticleTranslation";		}		public PortalArticleTranslation(Int64 TranslationID)		{			TableName="PortalArticleTranslation";			_TranslationID=TranslationID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleTranslation));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalArticleTranslation Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticleTranslation));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalArticleTranslation)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalArticleTranslation where TranslationID="+_TranslationID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_TranslationID =(Int64) Internalds.Tables[0].Rows[0]["TranslationID"];				_ArticleID =(Int64) Internalds.Tables[0].Rows[0]["ArticleID"];				_LanguageID =(Int64) Internalds.Tables[0].Rows[0]["LanguageID"];				_TranslatedArticleID =(Int64) Internalds.Tables[0].Rows[0]["TranslatedArticleID"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_ArticleID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "ArticleID Value can not be null ",PropertyName = "ArticleID",ValidationError = " " });				 //throw new Exception("ArticleID Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[3];			StoredProcedureParam[0]=MakeParameter("@ArticleID",_ArticleID);			StoredProcedureParam[1]=MakeParameter("@LanguageID",_LanguageID);			StoredProcedureParam[2]=MakeParameter("@TranslatedArticleID",_TranslatedArticleID);			try			{				RunSqlCommand("[Insert_PortalArticleTranslation]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_TranslationID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[4];			StoredProcedureParam[0]=MakeParameter("@TranslationID",_TranslationID);			StoredProcedureParam[1]=MakeParameter("@ArticleID",_ArticleID);			StoredProcedureParam[2]=MakeParameter("@LanguageID",_LanguageID);			StoredProcedureParam[3]=MakeParameter("@TranslatedArticleID",_TranslatedArticleID);			try			{				RunSqlCommand("[Update_PortalArticleTranslation]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@TranslationID",_TranslationID);			try			{				RunSqlCommand("[Delete_PortalArticleTranslation]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalArticleTranslationDS SelectAll()		{			 Insight.Datasets.PortalArticleTranslationDS ResDS=new Insight.Datasets.PortalArticleTranslationDS();			 RunStaticSqlCommand("Select * from PortalArticleTranslation", ResDS,"PortalArticleTranslation");			 return (Insight.Datasets.PortalArticleTranslationDS) ResDS ;		}		public static Insight.Datasets.PortalArticleTranslationDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalArticleTranslationDS  ResDS=new Insight.Datasets.PortalArticleTranslationDS();			 RunStaticSqlCommand("Select * from PortalArticleTranslation where " + FilterBy, ResDS, "PortalArticleTranslation");			 return (Insight.Datasets.PortalArticleTranslationDS) ResDS ; 		}		#endregion	}}