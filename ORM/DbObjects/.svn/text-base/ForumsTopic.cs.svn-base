using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class ForumsTopic:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private string _UserName;		private Int64 _numPosts;		private Int64 _ForumID;		private bool _isQuestion=false;		private string _Topic;		private string _LastUserName=string.Empty;		private Int64 _AnswerMessageID=0;		private Int64 _LastUserID;		private Int64 _PollID=0;		private Int32 _flags;		private bool _isDeleted=false;		private Int64 _LastMessageID;		private Int64 _UserID;		private DateTime _Posted;		private Int64 _TopicID;		private Int64 _TopicMovedID=0;		private Int32 _Priority;		private DateTime _LastPosted;		private Int64 _Views;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public string UserName		{			 get { return _UserName; }			 set { _UserName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 numPosts		{			 get { return _numPosts; }			 set { _numPosts=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 ForumID		{			 get { return _ForumID; }			 set { _ForumID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isQuestion		{			 get { return _isQuestion; }			 set { _isQuestion=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Topic		{			 get { return _Topic; }			 set { _Topic=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string LastUserName		{			 get { return _LastUserName; }			 set { _LastUserName=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 AnswerMessageID		{			 get { return _AnswerMessageID; }			 set { _AnswerMessageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 LastUserID		{			 get { return _LastUserID; }			 set { _LastUserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PollID		{			 get { return _PollID; }			 set { _PollID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 flags		{			 get { return _flags; }			 set { _flags=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isDeleted		{			 get { return _isDeleted; }			 set { _isDeleted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 LastMessageID		{			 get { return _LastMessageID; }			 set { _LastMessageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 UserID		{			 get { return _UserID; }			 set { _UserID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime Posted		{			 get { return _Posted; }			 set { _Posted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 TopicID		{			 get { return _TopicID; }			 set { _TopicID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 TopicMovedID		{			 get { return _TopicMovedID; }			 set { _TopicMovedID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Priority		{			 get { return _Priority; }			 set { _Priority=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime LastPosted		{			 get { return _LastPosted; }			 set { _LastPosted=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 Views		{			 get { return _Views; }			 set { _Views=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public ForumsTopic()		{			TableName="ForumsTopic";		}		public ForumsTopic(Int64 TopicID)		{			TableName="ForumsTopic";			_TopicID=TopicID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsTopic));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public ForumsTopic Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(ForumsTopic));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (ForumsTopic)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from ForumsTopic where TopicID="+_TopicID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_UserName =(string) Internalds.Tables[0].Rows[0]["UserName"];				_numPosts =(Int64) Internalds.Tables[0].Rows[0]["numPosts"];				_ForumID =(Int64) Internalds.Tables[0].Rows[0]["ForumID"];				_isQuestion = (Internalds.Tables[0].Rows[0]["isQuestion"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["isQuestion"]) ;				_Topic =(string) Internalds.Tables[0].Rows[0]["Topic"];				_LastUserName = (Internalds.Tables[0].Rows[0]["LastUserName"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["LastUserName"]) ;				_AnswerMessageID = (Internalds.Tables[0].Rows[0]["AnswerMessageID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["AnswerMessageID"]) ;				_LastUserID =(Int64) Internalds.Tables[0].Rows[0]["LastUserID"];				_PollID = (Internalds.Tables[0].Rows[0]["PollID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["PollID"]) ;				_flags =(Int32) Internalds.Tables[0].Rows[0]["flags"];				_isDeleted = (Internalds.Tables[0].Rows[0]["isDeleted"]==System.Convert.DBNull ? false : (bool)Internalds.Tables[0].Rows[0]["isDeleted"]) ;				_LastMessageID =(Int64) Internalds.Tables[0].Rows[0]["LastMessageID"];				_UserID =(Int64) Internalds.Tables[0].Rows[0]["UserID"];				_Posted =(DateTime) Internalds.Tables[0].Rows[0]["Posted"];				_TopicID =(Int64) Internalds.Tables[0].Rows[0]["TopicID"];				_TopicMovedID = (Internalds.Tables[0].Rows[0]["TopicMovedID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["TopicMovedID"]) ;				_Priority =(Int32) Internalds.Tables[0].Rows[0]["Priority"];				_LastPosted =(DateTime) Internalds.Tables[0].Rows[0]["LastPosted"];				_Views =(Int64) Internalds.Tables[0].Rows[0]["Views"];				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_UserName==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "UserName Value can not be null ",PropertyName = "UserName",ValidationError = " " });				 //throw new Exception("UserName Value can not be null");			}			if (_ForumID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "ForumID Value can not be null ",PropertyName = "ForumID",ValidationError = " " });				 //throw new Exception("ForumID Value can not be null");			}			if (_Topic==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Topic Value can not be null ",PropertyName = "Topic",ValidationError = " " });				 //throw new Exception("Topic Value can not be null");			}			if (_UserID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "UserID Value can not be null ",PropertyName = "UserID",ValidationError = " " });				 //throw new Exception("UserID Value can not be null");			}			if (_Posted==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Posted Value can not be null ",PropertyName = "Posted",ValidationError = " " });				 //throw new Exception("Posted Value can not be null");			}			if (_LastPosted==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LastPosted Value can not be null ",PropertyName = "LastPosted",ValidationError = " " });				 //throw new Exception("LastPosted Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[18];			StoredProcedureParam[0]=MakeParameter("@UserName",_UserName);			StoredProcedureParam[1]=MakeParameter("@numPosts",_numPosts);			StoredProcedureParam[2]=MakeParameter("@ForumID",_ForumID);			StoredProcedureParam[3]=MakeParameter("@isQuestion",(_isQuestion==false? System.Convert.DBNull : _isQuestion));			StoredProcedureParam[4]=MakeParameter("@Topic",_Topic);			StoredProcedureParam[5]=MakeParameter("@LastUserName",(_LastUserName==string.Empty? System.Convert.DBNull : _LastUserName));			StoredProcedureParam[6]=MakeParameter("@AnswerMessageID",(_AnswerMessageID==0? System.Convert.DBNull : _AnswerMessageID));			StoredProcedureParam[7]=MakeParameter("@LastUserID",_LastUserID);			StoredProcedureParam[8]=MakeParameter("@PollID",(_PollID==0? System.Convert.DBNull : _PollID));			StoredProcedureParam[9]=MakeParameter("@flags",_flags);			StoredProcedureParam[10]=MakeParameter("@isDeleted",(_isDeleted==false? System.Convert.DBNull : _isDeleted));			StoredProcedureParam[11]=MakeParameter("@LastMessageID",_LastMessageID);			StoredProcedureParam[12]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[13]=MakeParameter("@Posted",_Posted);			StoredProcedureParam[14]=MakeParameter("@TopicMovedID",(_TopicMovedID==0? System.Convert.DBNull : _TopicMovedID));			StoredProcedureParam[15]=MakeParameter("@Priority",_Priority);			StoredProcedureParam[16]=MakeParameter("@LastPosted",_LastPosted);			StoredProcedureParam[17]=MakeParameter("@Views",_Views);			try			{				RunSqlCommand("[Insert_ForumsTopic]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_TopicID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[19];			StoredProcedureParam[0]=MakeParameter("@UserName",_UserName);			StoredProcedureParam[1]=MakeParameter("@numPosts",_numPosts);			StoredProcedureParam[2]=MakeParameter("@ForumID",_ForumID);			StoredProcedureParam[3]=MakeParameter("@isQuestion",(_isQuestion==false? System.Convert.DBNull : _isQuestion));			StoredProcedureParam[4]=MakeParameter("@Topic",_Topic);			StoredProcedureParam[5]=MakeParameter("@LastUserName",(_LastUserName==string.Empty? System.Convert.DBNull : _LastUserName));			StoredProcedureParam[6]=MakeParameter("@AnswerMessageID",(_AnswerMessageID==0? System.Convert.DBNull : _AnswerMessageID));			StoredProcedureParam[7]=MakeParameter("@LastUserID",_LastUserID);			StoredProcedureParam[8]=MakeParameter("@PollID",(_PollID==0? System.Convert.DBNull : _PollID));			StoredProcedureParam[9]=MakeParameter("@flags",_flags);			StoredProcedureParam[10]=MakeParameter("@isDeleted",(_isDeleted==false? System.Convert.DBNull : _isDeleted));			StoredProcedureParam[11]=MakeParameter("@LastMessageID",_LastMessageID);			StoredProcedureParam[12]=MakeParameter("@UserID",_UserID);			StoredProcedureParam[13]=MakeParameter("@Posted",_Posted);			StoredProcedureParam[14]=MakeParameter("@TopicID",_TopicID);			StoredProcedureParam[15]=MakeParameter("@TopicMovedID",(_TopicMovedID==0? System.Convert.DBNull : _TopicMovedID));			StoredProcedureParam[16]=MakeParameter("@Priority",_Priority);			StoredProcedureParam[17]=MakeParameter("@LastPosted",_LastPosted);			StoredProcedureParam[18]=MakeParameter("@Views",_Views);			try			{				RunSqlCommand("[Update_ForumsTopic]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@TopicID",_TopicID);			try			{				RunSqlCommand("[Delete_ForumsTopic]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.ForumsTopicDS SelectAll()		{			 Insight.Datasets.ForumsTopicDS ResDS=new Insight.Datasets.ForumsTopicDS();			 RunStaticSqlCommand("Select * from ForumsTopic", ResDS,"ForumsTopic");			 return (Insight.Datasets.ForumsTopicDS) ResDS ;		}		public static Insight.Datasets.ForumsTopicDS SelectWhere(string FilterBy)		{			 Insight.Datasets.ForumsTopicDS  ResDS=new Insight.Datasets.ForumsTopicDS();			 RunStaticSqlCommand("Select * from ForumsTopic where " + FilterBy, ResDS, "ForumsTopic");			 return (Insight.Datasets.ForumsTopicDS) ResDS ; 		}		#endregion	}}