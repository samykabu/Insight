using System;using System.Text;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;using System.Xml.Serialization;namespace Insight 	{	[Serializable]	 public partial  class PortalArticle:Insight.DataBaseObject,IDisposable	{		#region Private Variables		private DateTime _ApprovedIN=DateTime.MinValue;		private string _Description=string.Empty;		private Int64 _DefLangArticleID=0;		private bool _isCanceled;		private string _Title;		private Int32 _Rate;		private Int64 _LanguageID;		private DateTime _CreatedIN;		private string _RawBody=string.Empty;		private Int32 _Status;		private bool _isPublished;		private DateTime _PublishedIn=DateTime.MinValue;		private Int64 _PortalArticleID;		private DateTime _LastEditedIn=DateTime.MinValue;		#endregion		#region Public properties		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime ApprovedIN		{			 get { return _ApprovedIN; }			 set { _ApprovedIN=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Description		{			 get { return _Description; }			 set { _Description=value; }		}		/// <summary>		/// This is the default language article ID , it is null for the default language article		/// </summary>		public Int64 DefLangArticleID		{			 get { return _DefLangArticleID; }			 set { _DefLangArticleID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isCanceled		{			 get { return _isCanceled; }			 set { _isCanceled=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string Title		{			 get { return _Title; }			 set { _Title=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Rate		{			 get { return _Rate; }			 set { _Rate=value; }		}		/// <summary>		/// Current article Language ID		/// </summary>		public Int64 LanguageID		{			 get { return _LanguageID; }			 set { _LanguageID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime CreatedIN		{			 get { return _CreatedIN; }			 set { _CreatedIN=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public string RawBody		{			 get { return _RawBody; }			 set { _RawBody=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int32 Status		{			 get { return _Status; }			 set { _Status=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public bool isPublished		{			 get { return _isPublished; }			 set { _isPublished=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime PublishedIn		{			 get { return _PublishedIn; }			 set { _PublishedIn=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public Int64 PortalArticleID		{			 get { return _PortalArticleID; }			 set { _PortalArticleID=value; }		}		/// <summary>		///   No Description Implemented		/// </summary>		public DateTime LastEditedIn		{			 get { return _LastEditedIn; }			 set { _LastEditedIn=value; }		}		#endregion		#region methods	#region Events		 public List<ValidateRecord> ValidationSummary = new List<ValidateRecord>();	#endregion		public PortalArticle()		{			TableName="PortalArticle";		}		public PortalArticle(Int64 PortalArticleID)		{			TableName="PortalArticle";			_PortalArticleID=PortalArticleID;			LoadByPrimaryKey();		}		public override string ToString()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticle));			StringBuilder outstr = new StringBuilder();			System.IO.TextWriter textwriter = new System.IO.StringWriter(outstr);			xml.Serialize(textwriter, this);			xml = null;			textwriter.Flush();			textwriter.Close();			textwriter = null;			return outstr.ToString();		}		public PortalArticle Clone()		{			XmlSerializer xml = new XmlSerializer(typeof(PortalArticle));			System.IO.TextReader textreader = new System.IO.StringReader(this.ToString());			return (PortalArticle)xml.Deserialize(textreader);		}		public void LoadByPrimaryKey()		{			DataSet Internalds=new DataSet();			this.RunSqlCommand("Select * from PortalArticle where PortalArticleID="+_PortalArticleID.ToString() , Internalds);			if (Internalds!=null && Internalds.Tables[0].Rows.Count>0)			{				_ApprovedIN = (Internalds.Tables[0].Rows[0]["ApprovedIN"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["ApprovedIN"]) ;				_Description = (Internalds.Tables[0].Rows[0]["Description"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["Description"]) ;				_DefLangArticleID = (Internalds.Tables[0].Rows[0]["DefLangArticleID"]==System.Convert.DBNull ? 0 : (Int64)Internalds.Tables[0].Rows[0]["DefLangArticleID"]) ;				_isCanceled =(bool) Internalds.Tables[0].Rows[0]["isCanceled"];				_Title =(string) Internalds.Tables[0].Rows[0]["Title"];				_Rate =(Int32) Internalds.Tables[0].Rows[0]["Rate"];				_LanguageID =(Int64) Internalds.Tables[0].Rows[0]["LanguageID"];				_CreatedIN =(DateTime) Internalds.Tables[0].Rows[0]["CreatedIN"];				_RawBody = (Internalds.Tables[0].Rows[0]["RawBody"]==System.Convert.DBNull ? string.Empty : (string)Internalds.Tables[0].Rows[0]["RawBody"]) ;				_Status =(Int32) Internalds.Tables[0].Rows[0]["Status"];				_isPublished =(bool) Internalds.Tables[0].Rows[0]["isPublished"];				_PublishedIn = (Internalds.Tables[0].Rows[0]["PublishedIn"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["PublishedIn"]) ;				_PortalArticleID =(Int64) Internalds.Tables[0].Rows[0]["PortalArticleID"];				_LastEditedIn = (Internalds.Tables[0].Rows[0]["LastEditedIn"]==System.Convert.DBNull ? DateTime.MinValue : (DateTime)Internalds.Tables[0].Rows[0]["LastEditedIn"]) ;				Internalds.Dispose();				this.Close();			}			else			{				this.Close();			}		}		protected override void OnValidate()		{			ValidationSummary.Clear();			if (_Title==string.Empty)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "Title Value can not be null ",PropertyName = "Title",ValidationError = " " });				 //throw new Exception("Title Value can not be null");			}			if (_LanguageID==0)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "LanguageID Value can not be null ",PropertyName = "LanguageID",ValidationError = " " });				 //throw new Exception("LanguageID Value can not be null");			}			if (_CreatedIN==DateTime.MinValue)			{				ValidationSummary.Add	(new ValidateRecord	(){ Message = "CreatedIN Value can not be null ",PropertyName = "CreatedIN",ValidationError = " " });				 //throw new Exception("CreatedIN Value can not be null");			}			if (ValidationSummary.Count>0)				throw new ValidationException("Missing Properties", ValidationSummary);		}		protected override bool OnInsert()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[13];			StoredProcedureParam[0]=MakeParameter("@ApprovedIN",(_ApprovedIN==DateTime.MinValue? System.Convert.DBNull : _ApprovedIN));			StoredProcedureParam[1]=MakeParameter("@Description",(_Description==string.Empty? System.Convert.DBNull : _Description));			StoredProcedureParam[2]=MakeParameter("@DefLangArticleID",(_DefLangArticleID==0? System.Convert.DBNull : _DefLangArticleID));			StoredProcedureParam[3]=MakeParameter("@isCanceled",_isCanceled);			StoredProcedureParam[4]=MakeParameter("@Title",_Title);			StoredProcedureParam[5]=MakeParameter("@Rate",_Rate);			StoredProcedureParam[6]=MakeParameter("@LanguageID",_LanguageID);			StoredProcedureParam[7]=MakeParameter("@CreatedIN",_CreatedIN);			StoredProcedureParam[8]=MakeParameter("@RawBody",(_RawBody==string.Empty? System.Convert.DBNull : _RawBody));			StoredProcedureParam[9]=MakeParameter("@Status",_Status);			StoredProcedureParam[10]=MakeParameter("@isPublished",_isPublished);			StoredProcedureParam[11]=MakeParameter("@PublishedIn",(_PublishedIn==DateTime.MinValue? System.Convert.DBNull : _PublishedIn));			StoredProcedureParam[12]=MakeParameter("@LastEditedIn",(_LastEditedIn==DateTime.MinValue? System.Convert.DBNull : _LastEditedIn));			try			{				RunSqlCommand("[Insert_PortalArticle]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						Int64 Ident=Int64.Parse(mReader[1].ToString());						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						_PortalArticleID=Ident;						return Res;						}					else						{							mReader.Close();							mReader=null;							throw new Exception("Data Reader is null");						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnUpdate()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[14];			StoredProcedureParam[0]=MakeParameter("@ApprovedIN",(_ApprovedIN==DateTime.MinValue? System.Convert.DBNull : _ApprovedIN));			StoredProcedureParam[1]=MakeParameter("@Description",(_Description==string.Empty? System.Convert.DBNull : _Description));			StoredProcedureParam[2]=MakeParameter("@DefLangArticleID",(_DefLangArticleID==0? System.Convert.DBNull : _DefLangArticleID));			StoredProcedureParam[3]=MakeParameter("@isCanceled",_isCanceled);			StoredProcedureParam[4]=MakeParameter("@Title",_Title);			StoredProcedureParam[5]=MakeParameter("@Rate",_Rate);			StoredProcedureParam[6]=MakeParameter("@LanguageID",_LanguageID);			StoredProcedureParam[7]=MakeParameter("@CreatedIN",_CreatedIN);			StoredProcedureParam[8]=MakeParameter("@RawBody",(_RawBody==string.Empty? System.Convert.DBNull : _RawBody));			StoredProcedureParam[9]=MakeParameter("@Status",_Status);			StoredProcedureParam[10]=MakeParameter("@isPublished",_isPublished);			StoredProcedureParam[11]=MakeParameter("@PublishedIn",(_PublishedIn==DateTime.MinValue? System.Convert.DBNull : _PublishedIn));			StoredProcedureParam[12]=MakeParameter("@PortalArticleID",_PortalArticleID);			StoredProcedureParam[13]=MakeParameter("@LastEditedIn",(_LastEditedIn==DateTime.MinValue? System.Convert.DBNull : _LastEditedIn));			try			{				RunSqlCommand("[Update_PortalArticle]",StoredProcedureParam,ref mReader);				if(mReader!=null)					{						if(mReader.Read())						{						bool Res = bool.Parse(mReader[0].ToString());						mReader.Close();						mReader=null;						this.Close();						return Res;						}					else						{							mReader.Close();							mReader=null;							return false;						}					}					else					{						 throw new Exception("Data Reader is null");					}			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		protected override bool OnDelete()		{			SqlDataReader mReader=null;			SqlParameter[] StoredProcedureParam=new SqlParameter[1];			StoredProcedureParam[0]=MakeParameter("@PortalArticleID",_PortalArticleID);			try			{				RunSqlCommand("[Delete_PortalArticle]",StoredProcedureParam,ref mReader);				bool Res=false;				if(mReader.Read())						Res=bool.Parse(mReader[0].ToString());				mReader.Close();				mReader=null;				this.Close();				return Res;			}				catch (Exception ex)			{				if(mReader!=null)					mReader=null;					this.Close();				throw ex;			}		}		public new void Dispose()		{			base.Dispose();			//GC.SuppressFinalize(this);		}		public static Insight.Datasets.PortalArticleDS SelectAll()		{			 Insight.Datasets.PortalArticleDS ResDS=new Insight.Datasets.PortalArticleDS();			 RunStaticSqlCommand("Select * from PortalArticle", ResDS,"PortalArticle");			 return (Insight.Datasets.PortalArticleDS) ResDS ;		}		public static Insight.Datasets.PortalArticleDS SelectWhere(string FilterBy)		{			 Insight.Datasets.PortalArticleDS  ResDS=new Insight.Datasets.PortalArticleDS();			 RunStaticSqlCommand("Select * from PortalArticle where " + FilterBy, ResDS, "PortalArticle");			 return (Insight.Datasets.PortalArticleDS) ResDS ; 		}
        public static Insight.Datasets.PortalArticleDS SelectWhere(string FilterBy,int count)
        {
            Insight.Datasets.PortalArticleDS ResDS = new Insight.Datasets.PortalArticleDS();
            RunStaticSqlCommand("Select Top "+ count +" * from PortalArticle where " + FilterBy, ResDS, "PortalArticle");
            return (Insight.Datasets.PortalArticleDS)ResDS;
        }		#endregion	}}